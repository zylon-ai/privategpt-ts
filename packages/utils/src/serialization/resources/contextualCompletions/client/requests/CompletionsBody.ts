/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from '../../../..';
import * as PrivategptApi from '../../../../../api';
import * as core from '../../../../../core';

export const CompletionsBody: core.serialization.Schema<
  serializers.CompletionsBody.Raw,
  PrivategptApi.CompletionsBody
> = core.serialization.object({
  prompt: core.serialization.string(),
  systemPrompt: core.serialization.property(
    'system_prompt',
    core.serialization.string().optional(),
  ),
  useContext: core.serialization.property(
    'use_context',
    core.serialization.boolean().optional(),
  ),
  contextFilter: core.serialization.property(
    'context_filter',
    core.serialization
      .lazyObject(async () => (await import('../../../..')).ContextFilter)
      .optional(),
  ),
  includeSources: core.serialization.property(
    'include_sources',
    core.serialization.boolean().optional(),
  ),
  stream: core.serialization.boolean().optional(),
});

export declare namespace CompletionsBody {
  interface Raw {
    prompt: string;
    system_prompt?: string | null;
    use_context?: boolean | null;
    context_filter?: serializers.ContextFilter.Raw | null;
    include_sources?: boolean | null;
    stream?: boolean | null;
  }
}
