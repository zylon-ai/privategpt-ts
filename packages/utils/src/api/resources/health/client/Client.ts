/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from '../../../../core';
import * as PrivategptApi from '../../..';
import urlJoin from 'url-join';
import * as serializers from '../../../../serialization';
import * as errors from '../../../../errors';

export declare namespace Health {
  interface Options {
    environment: core.Supplier<string>;
  }

  interface RequestOptions {
    timeoutInSeconds?: number;
    maxRetries?: number;
  }
}

export class Health {
  constructor(protected readonly _options: Health.Options) {}

  /**
   * Return ok if the system is up.
   *
   * @example
   *     await privategptApi.health.health()
   */
  public async health(
    requestOptions?: Health.RequestOptions,
  ): Promise<PrivategptApi.HealthResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        await core.Supplier.get(this._options.environment),
        'health',
      ),
      method: 'GET',
      headers: {
        'X-Fern-Language': 'JavaScript',
      },
      contentType: 'application/json',
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
    });
    if (_response.ok) {
      return await serializers.HealthResponse.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: 'passthrough',
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ['response'],
      });
    }

    if (_response.error.reason === 'status-code') {
      throw new errors.PrivategptApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case 'non-json':
        throw new errors.PrivategptApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case 'timeout':
        throw new errors.PrivategptApiTimeoutError();
      case 'unknown':
        throw new errors.PrivategptApiError({
          message: _response.error.errorMessage,
        });
    }
  }
}
