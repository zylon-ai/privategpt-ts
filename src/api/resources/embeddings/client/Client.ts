/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from '../../../../core';
import * as PrivategptApi from '../../..';
import * as serializers from '../../../../serialization';
import urlJoin from 'url-join';
import * as errors from '../../../../errors';

export declare namespace Embeddings {
  interface Options {
    environment: core.Supplier<string>;
  }

  interface RequestOptions {
    timeoutInSeconds?: number;
    maxRetries?: number;
  }
}

export class Embeddings {
  constructor(protected readonly _options: Embeddings.Options) {}

  /**
   * Get a vector representation of a given input.
   *
   * That vector representation can be easily consumed
   * by machine learning models and algorithms.
   * @throws {@link PrivategptApi.UnprocessableEntityError}
   *
   * @example
   *     await privategptApi.embeddings.embeddingsGeneration({})
   */
  public async embeddingsGeneration(
    request: PrivategptApi.EmbeddingsBody,
    requestOptions?: Embeddings.RequestOptions,
  ): Promise<PrivategptApi.EmbeddingsResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        await core.Supplier.get(this._options.environment),
        'v1/embeddings',
      ),
      method: 'POST',
      headers: {
        'X-Fern-Language': 'JavaScript',
      },
      contentType: 'application/json',
      body: await serializers.EmbeddingsBody.jsonOrThrow(request, {
        unrecognizedObjectKeys: 'strip',
      }),
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
    });
    if (_response.ok) {
      return await serializers.EmbeddingsResponse.parseOrThrow(_response.body, {
        unrecognizedObjectKeys: 'passthrough',
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        breadcrumbsPrefix: ['response'],
      });
    }

    if (_response.error.reason === 'status-code') {
      switch (_response.error.statusCode) {
        case 422:
          throw new PrivategptApi.UnprocessableEntityError(
            await serializers.HttpValidationError.parseOrThrow(
              _response.error.body,
              {
                unrecognizedObjectKeys: 'passthrough',
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ['response'],
              },
            ),
          );
        default:
          throw new errors.PrivategptApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.body,
          });
      }
    }

    switch (_response.error.reason) {
      case 'non-json':
        throw new errors.PrivategptApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case 'timeout':
        throw new errors.PrivategptApiTimeoutError();
      case 'unknown':
        throw new errors.PrivategptApiError({
          message: _response.error.errorMessage,
        });
    }
  }
}
