/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from '../../../..';
import * as PrivategptApi from '../../../../../api';
import * as core from '../../../../../core';

export const ChatBody: core.serialization.Schema<
  serializers.ChatBody.Raw,
  PrivategptApi.ChatBody
> = core.serialization.object({
  messages: core.serialization.list(
    core.serialization.lazyObject(
      async () => (await import('../../../..')).OpenAiMessage,
    ),
  ),
  useContext: core.serialization.property(
    'use_context',
    core.serialization.boolean().optional(),
  ),
  contextFilter: core.serialization.property(
    'context_filter',
    core.serialization
      .lazyObject(async () => (await import('../../../..')).ContextFilter)
      .optional(),
  ),
  includeSources: core.serialization.property(
    'include_sources',
    core.serialization.boolean().optional(),
  ),
  stream: core.serialization.boolean().optional(),
});

export declare namespace ChatBody {
  interface Raw {
    messages: serializers.OpenAiMessage.Raw[];
    use_context?: boolean | null;
    context_filter?: serializers.ContextFilter.Raw | null;
    include_sources?: boolean | null;
    stream?: boolean | null;
  }
}
